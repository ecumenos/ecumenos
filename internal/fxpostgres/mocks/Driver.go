// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v4"
)

// MockDriver is an autogenerated mock type for the Driver type
type MockDriver struct {
	mock.Mock
}

type MockDriver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDriver) EXPECT() *MockDriver_Expecter {
	return &MockDriver_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockDriver) Close() {
	_m.Called()
}

// MockDriver_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockDriver_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockDriver_Expecter) Close() *MockDriver_Close_Call {
	return &MockDriver_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockDriver_Close_Call) Run(run func()) *MockDriver_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDriver_Close_Call) Return() *MockDriver_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDriver_Close_Call) RunAndReturn(run func()) *MockDriver_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CountRows provides a mock function with given fields: ctx, query, args
func (_m *MockDriver) CountRows(ctx context.Context, query string, args ...interface{}) (int, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CountRows")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (int, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) int); ok {
		r0 = rf(ctx, query, args...)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDriver_CountRows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountRows'
type MockDriver_CountRows_Call struct {
	*mock.Call
}

// CountRows is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *MockDriver_Expecter) CountRows(ctx interface{}, query interface{}, args ...interface{}) *MockDriver_CountRows_Call {
	return &MockDriver_CountRows_Call{Call: _e.mock.On("CountRows",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockDriver_CountRows_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *MockDriver_CountRows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockDriver_CountRows_Call) Return(_a0 int, _a1 error) *MockDriver_CountRows_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDriver_CountRows_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (int, error)) *MockDriver_CountRows_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteQuery provides a mock function with given fields: ctx, query, args
func (_m *MockDriver) ExecuteQuery(ctx context.Context, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteQuery")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) error); ok {
		r0 = rf(ctx, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDriver_ExecuteQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteQuery'
type MockDriver_ExecuteQuery_Call struct {
	*mock.Call
}

// ExecuteQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *MockDriver_Expecter) ExecuteQuery(ctx interface{}, query interface{}, args ...interface{}) *MockDriver_ExecuteQuery_Call {
	return &MockDriver_ExecuteQuery_Call{Call: _e.mock.On("ExecuteQuery",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockDriver_ExecuteQuery_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *MockDriver_ExecuteQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockDriver_ExecuteQuery_Call) Return(_a0 error) *MockDriver_ExecuteQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDriver_ExecuteQuery_Call) RunAndReturn(run func(context.Context, string, ...interface{}) error) *MockDriver_ExecuteQuery_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx
func (_m *MockDriver) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDriver_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockDriver_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDriver_Expecter) Ping(ctx interface{}) *MockDriver_Ping_Call {
	return &MockDriver_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MockDriver_Ping_Call) Run(run func(ctx context.Context)) *MockDriver_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDriver_Ping_Call) Return(_a0 error) *MockDriver_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDriver_Ping_Call) RunAndReturn(run func(context.Context) error) *MockDriver_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function with given fields: ctx, query, args
func (_m *MockDriver) QueryRow(ctx context.Context, query string, args ...interface{}) (pgx.Row, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 pgx.Row
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (pgx.Row, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) pgx.Row); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Row)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDriver_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type MockDriver_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *MockDriver_Expecter) QueryRow(ctx interface{}, query interface{}, args ...interface{}) *MockDriver_QueryRow_Call {
	return &MockDriver_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockDriver_QueryRow_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *MockDriver_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockDriver_QueryRow_Call) Return(_a0 pgx.Row, _a1 error) *MockDriver_QueryRow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDriver_QueryRow_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (pgx.Row, error)) *MockDriver_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRows provides a mock function with given fields: ctx, query, args
func (_m *MockDriver) QueryRows(ctx context.Context, query string, args ...interface{}) (pgx.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryRows")
	}

	var r0 pgx.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (pgx.Rows, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) pgx.Rows); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDriver_QueryRows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRows'
type MockDriver_QueryRows_Call struct {
	*mock.Call
}

// QueryRows is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *MockDriver_Expecter) QueryRows(ctx interface{}, query interface{}, args ...interface{}) *MockDriver_QueryRows_Call {
	return &MockDriver_QueryRows_Call{Call: _e.mock.On("QueryRows",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockDriver_QueryRows_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *MockDriver_QueryRows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockDriver_QueryRows_Call) Return(_a0 pgx.Rows, _a1 error) *MockDriver_QueryRows_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDriver_QueryRows_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (pgx.Rows, error)) *MockDriver_QueryRows_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDriver creates a new instance of MockDriver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDriver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDriver {
	mock := &MockDriver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
