// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	fxresponsefactory "github.com/ecumenos/ecumenos/internal/fxresponsefactory"
	mock "github.com/stretchr/testify/mock"

	zap "go.uber.org/zap"
)

// Writer is an autogenerated mock type for the Writer type
type Writer struct {
	mock.Mock
}

type Writer_Expecter struct {
	mock *mock.Mock
}

func (_m *Writer) EXPECT() *Writer_Expecter {
	return &Writer_Expecter{mock: &_m.Mock}
}

// SetLogger provides a mock function with given fields: logger
func (_m *Writer) SetLogger(logger *zap.Logger) {
	_m.Called(logger)
}

// Writer_SetLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLogger'
type Writer_SetLogger_Call struct {
	*mock.Call
}

// SetLogger is a helper method to define mock.On call
//   - logger *zap.Logger
func (_e *Writer_Expecter) SetLogger(logger interface{}) *Writer_SetLogger_Call {
	return &Writer_SetLogger_Call{Call: _e.mock.On("SetLogger", logger)}
}

func (_c *Writer_SetLogger_Call) Run(run func(logger *zap.Logger)) *Writer_SetLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*zap.Logger))
	})
	return _c
}

func (_c *Writer_SetLogger_Call) Return() *Writer_SetLogger_Call {
	_c.Call.Return()
	return _c
}

func (_c *Writer_SetLogger_Call) RunAndReturn(run func(*zap.Logger)) *Writer_SetLogger_Call {
	_c.Call.Return(run)
	return _c
}

// WriteError provides a mock function with given fields: ctx, msg, cause, opts
func (_m *Writer) WriteError(ctx context.Context, msg string, cause error, opts ...fxresponsefactory.ResponseBuildOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, msg, cause)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WriteError")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, error, ...fxresponsefactory.ResponseBuildOption) error); ok {
		r0 = rf(ctx, msg, cause, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Writer_WriteError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteError'
type Writer_WriteError_Call struct {
	*mock.Call
}

// WriteError is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - cause error
//   - opts ...fxresponsefactory.ResponseBuildOption
func (_e *Writer_Expecter) WriteError(ctx interface{}, msg interface{}, cause interface{}, opts ...interface{}) *Writer_WriteError_Call {
	return &Writer_WriteError_Call{Call: _e.mock.On("WriteError",
		append([]interface{}{ctx, msg, cause}, opts...)...)}
}

func (_c *Writer_WriteError_Call) Run(run func(ctx context.Context, msg string, cause error, opts ...fxresponsefactory.ResponseBuildOption)) *Writer_WriteError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]fxresponsefactory.ResponseBuildOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(fxresponsefactory.ResponseBuildOption)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(error), variadicArgs...)
	})
	return _c
}

func (_c *Writer_WriteError_Call) Return(_a0 error) *Writer_WriteError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Writer_WriteError_Call) RunAndReturn(run func(context.Context, string, error, ...fxresponsefactory.ResponseBuildOption) error) *Writer_WriteError_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFail provides a mock function with given fields: ctx, data, opts
func (_m *Writer) WriteFail(ctx context.Context, data interface{}, opts ...fxresponsefactory.ResponseBuildOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, data)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WriteFail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...fxresponsefactory.ResponseBuildOption) error); ok {
		r0 = rf(ctx, data, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Writer_WriteFail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFail'
type Writer_WriteFail_Call struct {
	*mock.Call
}

// WriteFail is a helper method to define mock.On call
//   - ctx context.Context
//   - data interface{}
//   - opts ...fxresponsefactory.ResponseBuildOption
func (_e *Writer_Expecter) WriteFail(ctx interface{}, data interface{}, opts ...interface{}) *Writer_WriteFail_Call {
	return &Writer_WriteFail_Call{Call: _e.mock.On("WriteFail",
		append([]interface{}{ctx, data}, opts...)...)}
}

func (_c *Writer_WriteFail_Call) Run(run func(ctx context.Context, data interface{}, opts ...fxresponsefactory.ResponseBuildOption)) *Writer_WriteFail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]fxresponsefactory.ResponseBuildOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(fxresponsefactory.ResponseBuildOption)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Writer_WriteFail_Call) Return(_a0 error) *Writer_WriteFail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Writer_WriteFail_Call) RunAndReturn(run func(context.Context, interface{}, ...fxresponsefactory.ResponseBuildOption) error) *Writer_WriteFail_Call {
	_c.Call.Return(run)
	return _c
}

// WriteSuccess provides a mock function with given fields: ctx, payload, opts
func (_m *Writer) WriteSuccess(ctx context.Context, payload interface{}, opts ...fxresponsefactory.ResponseBuildOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, payload)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WriteSuccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...fxresponsefactory.ResponseBuildOption) error); ok {
		r0 = rf(ctx, payload, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Writer_WriteSuccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteSuccess'
type Writer_WriteSuccess_Call struct {
	*mock.Call
}

// WriteSuccess is a helper method to define mock.On call
//   - ctx context.Context
//   - payload interface{}
//   - opts ...fxresponsefactory.ResponseBuildOption
func (_e *Writer_Expecter) WriteSuccess(ctx interface{}, payload interface{}, opts ...interface{}) *Writer_WriteSuccess_Call {
	return &Writer_WriteSuccess_Call{Call: _e.mock.On("WriteSuccess",
		append([]interface{}{ctx, payload}, opts...)...)}
}

func (_c *Writer_WriteSuccess_Call) Run(run func(ctx context.Context, payload interface{}, opts ...fxresponsefactory.ResponseBuildOption)) *Writer_WriteSuccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]fxresponsefactory.ResponseBuildOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(fxresponsefactory.ResponseBuildOption)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Writer_WriteSuccess_Call) Return(_a0 error) *Writer_WriteSuccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Writer_WriteSuccess_Call) RunAndReturn(run func(context.Context, interface{}, ...fxresponsefactory.ResponseBuildOption) error) *Writer_WriteSuccess_Call {
	_c.Call.Return(run)
	return _c
}

// NewWriter creates a new instance of Writer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Writer {
	mock := &Writer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
